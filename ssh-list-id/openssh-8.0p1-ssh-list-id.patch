diff -uNr a/Makefile.in b/Makefile.in
--- a/Makefile.in	2020-05-07 21:11:53.503943894 +0900
+++ b/Makefile.in	2020-05-07 22:41:05.027090922 +0900
@@ -68,7 +68,7 @@
 MKDIR_P=@MKDIR_P@
 INSTALL_SSH_LDAP_HELPER=@INSTALL_SSH_LDAP_HELPER@
 
-TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT) ssh-ldap-helper$(EXEEXT) ssh-keycat$(EXEEXT) ctr-cavstest$(EXEEXT) ssh-cavs$(EXEEXT)
+TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh-keysign${EXEEXT} ssh-pkcs11-helper$(EXEEXT) ssh-agent$(EXEEXT) scp$(EXEEXT) sftp-server$(EXEEXT) sftp$(EXEEXT) ssh-ldap-helper$(EXEEXT) ssh-keycat$(EXEEXT) ctr-cavstest$(EXEEXT) ssh-cavs$(EXEEXT) ssh-list-id$(EXEEXT)
 
 XMSS_OBJS=\
 	ssh-xmss.o \
@@ -130,6 +130,11 @@
 	sandbox-seccomp-filter.o sandbox-capsicum.o sandbox-pledge.o \
 	sandbox-solaris.o uidswap.o
 
+SSHLISTID_OBJS=ssh-list-id.o servconf.o auth.o auth-options.o auth-shadow.o auth-pam.o \
+	audit.o audit-bsm.o audit-linux.o \
+	groupaccess.o auth2.o auth2-chall.o \
+	uidswap.o loginrec.o monitor_wrap.o
+
 MANPAGES	= moduli.5.out scp.1.out ssh-add.1.out ssh-agent.1.out ssh-keygen.1.out ssh-keyscan.1.out ssh.1.out sshd.8.out sftp-server.8.out sftp.1.out ssh-keysign.8.out ssh-pkcs11-helper.8.out sshd_config.5.out ssh_config.5.out ssh-ldap-helper.8.out ssh-ldap.conf.5.out
 MANPAGES_IN	= moduli.5 scp.1 ssh-add.1 ssh-agent.1 ssh-keygen.1 ssh-keyscan.1 ssh.1 sshd.8 sftp-server.8 sftp.1 ssh-keysign.8 ssh-pkcs11-helper.8 sshd_config.5 ssh_config.5 ssh-ldap-helper.8 ssh-ldap.conf.5
 MANTYPE		= @MANTYPE@
@@ -223,6 +228,9 @@
 sftp$(EXEEXT): $(LIBCOMPAT) libssh.a sftp.o sftp-client.o sftp-common.o sftp-glob.o progressmeter.o
 	$(LD) -o $@ progressmeter.o sftp.o sftp-client.o sftp-common.o sftp-glob.o $(LDFLAGS) -lssh -lopenbsd-compat $(LIBS) $(LIBEDIT)
 
+ssh-list-id$(EXEEXT): libssh.a $(LIBCOMPAT) $(SSHLISTID_OBJS)
+	$(LD) -o $@ $(SSHLISTID_OBJS) $(LDFLAGS) -lssh -lopenbsd-compat $(SSHDLIBS) $(LIBS) $(GSSLIBS) $(K5LIBS)
+
 # test driver for the loginrec code - not built by default
 logintest: logintest.o $(LIBCOMPAT) libssh.a loginrec.o
 	$(LD) -o $@ logintest.o $(LDFLAGS) loginrec.o -lopenbsd-compat -lssh $(LIBS)
@@ -379,6 +387,7 @@
 	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-cavs_driver.pl $(DESTDIR)$(libexecdir)/ssh-cavs_driver.pl
 	$(INSTALL) -m 0755 $(STRIP_OPT) sftp$(EXEEXT) $(DESTDIR)$(bindir)/sftp$(EXEEXT)
 	$(INSTALL) -m 0755 $(STRIP_OPT) sftp-server$(EXEEXT) $(DESTDIR)$(SFTP_SERVER)$(EXEEXT)
+	$(INSTALL) -m 0755 $(STRIP_OPT) ssh-list-id$(EXEEXT) $(DESTDIR)$(bindir)/ssh-list-id$(EXEEXT)
 	$(INSTALL) -m 644 ssh.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/ssh.1
 	$(INSTALL) -m 644 scp.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/scp.1
 	$(INSTALL) -m 644 ssh-add.1.out $(DESTDIR)$(mandir)/$(mansubdir)1/ssh-add.1
diff -uNr a/auth2-pubkey.c b/auth2-pubkey.c
--- a/auth2-pubkey.c	2020-05-07 21:42:09.563043644 +0900
+++ b/auth2-pubkey.c	2020-05-07 22:37:01.566727088 +0900
@@ -562,38 +562,6 @@
 	return found_principal;
 }
 
-static void
-skip_space(char **cpp)
-{
-	char *cp;
-
-	for (cp = *cpp; *cp == ' ' || *cp == '\t'; cp++)
-		;
-	*cpp = cp;
-}
-
-/*
- * Advanced *cpp past the end of key options, defined as the first unquoted
- * whitespace character. Returns 0 on success or -1 on failure (e.g.
- * unterminated quotes).
- */
-static int
-advance_past_options(char **cpp)
-{
-	char *cp = *cpp;
-	int quoted = 0;
-
-	for (; *cp && (quoted || (*cp != ' ' && *cp != '\t')); cp++) {
-		if (*cp == '\\' && cp[1] == '"')
-			cp++;	/* Skip both */
-		else if (*cp == '"')
-			quoted = !quoted;
-	}
-	*cpp = cp;
-	/* return failure for unterminated quotes */
-	return (*cp == '\0' && quoted) ? -1 : 0;
-}
-
 /*
  * Check a single line of an authorized_keys-format file. Returns 0 if key
  * matches, -1 otherwise. Will return key/cert options via *authoptsp
diff -uNr a/authfile.c b/authfile.c
--- a/authfile.c	2020-05-07 21:39:40.120967213 +0900
+++ b/authfile.c	2020-05-07 22:37:01.566727088 +0900
@@ -544,3 +544,25 @@
 	}
 }
 
+/*
+ * Advanced *cpp past the end of key options, defined as the first unquoted
+ * whitespace character. Returns 0 on success or -1 on failure (e.g.
+ * unterminated quotes).
+ */
+int
+advance_past_options(char **cpp)
+{
+	char *cp = *cpp;
+	int quoted = 0;
+
+	for (; *cp && (quoted || (*cp != ' ' && *cp != '\t')); cp++) {
+		if (*cp == '\\' && cp[1] == '"')
+			cp++;	/* Skip both */
+		else if (*cp == '"')
+			quoted = !quoted;
+	}
+	*cpp = cp;
+	/* return failure for unterminated quotes */
+	return (*cp == '\0' && quoted) ? -1 : 0;
+}
+
diff -uNr a/authfile.h b/authfile.h
--- a/authfile.h	2020-05-07 21:39:29.287816694 +0900
+++ b/authfile.h	2020-05-07 22:37:01.566727088 +0900
@@ -48,5 +48,6 @@
 int sshkey_perm_ok(int, const char *);
 int sshkey_in_file(struct sshkey *, const char *, int, int);
 int sshkey_check_revoked(struct sshkey *key, const char *revoked_keys_file);
+int advance_past_options(char **cpp);
 
 #endif
diff -uNr a/misc.c b/misc.c
--- a/misc.c	2020-05-07 21:39:40.118967185 +0900
+++ b/misc.c	2020-05-07 22:37:01.566727088 +0900
@@ -2126,3 +2126,13 @@
 {
 	return (*path == '/') ? 1 : 0;
 }
+
+void
+skip_space(char **cpp)
+{
+	char *cp;
+
+	for (cp = *cpp; *cp == ' ' || *cp == '\t'; cp++)
+		;
+	*cpp = cp;
+}
diff -uNr a/misc.h b/misc.h
--- a/misc.h	2020-05-07 21:39:29.287816694 +0900
+++ b/misc.h	2020-05-07 22:37:01.566727088 +0900
@@ -44,6 +44,7 @@
 /* misc.c */
 
 char	*chop(char *);
+void	skip_space(char **);
 char	*strdelim(char **);
 char	*strdelimw(char **);
 int	 set_nonblock(int);
diff -uNr a/ssh-list-id.c b/ssh-list-id.c
--- a/ssh-list-id.c	1970-01-01 09:00:00.000000000 +0900
+++ b/ssh-list-id.c	2020-05-07 22:42:38.992389220 +0900
@@ -0,0 +1,254 @@
+#include "includes.h"
+
+#include <sys/types.h>
+#include <unistd.h>
+#include <string.h>
+
+#include "misc.h"
+#include "log.h"
+#include "pathnames.h"
+#include "servconf.h"
+#include "utf8.h"
+#include "digest.h"
+#include "sshkey.h"
+#include "openbsd-compat/sys-queue.h"
+#include "hostfile.h"
+#include "auth.h"
+#include "sshbuf.h"
+#include "uidswap.h"
+#include "authfile.h"
+
+#ifdef GSSAPI
+#include "ssh-gss.h"
+#endif
+
+#include "monitor_wrap.h"
+
+/* argv0 */
+extern char *__progname;
+
+/* global variables */
+ServerOptions options;
+struct sshbuf *cfg;
+
+/* dummy variables */
+struct sshauthopt *auth_opts = NULL;
+struct passwd *privsep_pw = NULL;
+struct monitor *pmonitor = NULL;
+struct sshbuf *loginmsg;
+int use_privsep = -1;
+u_char *session_id2 = NULL;
+u_int session_id2_len = 0;
+Authctxt *the_authctxt = NULL;
+Authmethod method_none;
+Authmethod method_pubkey;
+Authmethod method_passwd;
+Authmethod method_kbdint;
+Authmethod method_hostbased;
+#ifdef GSSAPI
+Authmethod method_gssapi;
+Authmethod method_gsskeyex;
+#endif
+
+
+/* dummy function */
+int listening_for_clients(void)
+{
+	return 0;
+}
+
+static void
+usage(void)
+{
+	fprintf(stderr,
+			"usage: ssh-list-id [-v] [-V] [-B|-E md5|-E sha256] [-u user] [-f sshd_config]\n"
+			"                   [-a authorized_keys] [-C connection_spec]\n");
+	exit(1);
+}
+
+static void
+list_id_from_file(const char *file, int fphash, enum sshkey_fp_rep rep, struct passwd *pw)
+{
+	FILE *f;
+	char *line = NULL;
+	size_t linesize;
+	u_long linenum = 0;
+
+	printf("# authorized_keys file %s:\n", file);
+	errno = 0;
+	f = auth_openkeyfile(file, pw, options.strict_modes);
+	if (!f) {
+		if (errno == ENOENT)
+			logit("file %s does not exist, skipped", file);
+		else
+			logit("some problems occurred to open file %s", file);
+		return;
+	}
+
+	while (getline(&line, &linesize, f) != -1) {
+		struct sshkey *found;
+		char *fp = NULL, *cp = line;
+		linenum++;
+
+		skip_space(&cp);
+		if (!*cp || *cp == '\n' || *cp == '#')
+			continue;
+
+		if ((found = sshkey_new(KEY_UNSPEC)) == NULL) {
+			logit("line %lu: internal error: sshkey_new failed", linenum);
+			continue;
+		}
+		if (sshkey_read(found, &cp) != 0) {
+			if (advance_past_options(&cp) != 0) {
+				logit("line %lu: invalid key option string", linenum);
+				sshkey_free(found);
+				continue;
+			}
+			skip_space(&cp);
+			if (sshkey_read(found, &cp) != 0) {
+				logit("line %lu: no key found", linenum);
+				sshkey_free(found);
+				continue;
+			}
+		}
+
+		fp = sshkey_fingerprint(found, fphash, rep);
+		sshkey_free(found);
+		if (fp == NULL) {
+			logit("line %lu: internal error: sshkey_fingerprint failed", linenum);
+			continue;
+		}
+		if (rep == SSH_FP_RANDOMART)
+			printf("line %lu:\n%s\n", linenum, fp);
+		else
+			printf("line %lu: %s\n", linenum, fp);
+		free(fp);
+	}
+	free(line);
+}
+
+/*
+ * Main program for key listing
+ */
+int
+main(int argc, char **argv)
+{
+	uid_t exec_user;
+	char *connection_spec = NULL, conspec_buf[1024];
+	struct connection_info *connection_info;
+	char *authorized_keys_path = NULL;
+	char *sshd_config_path = _PATH_SERVER_CONFIG_FILE;
+	char *target_user = NULL;
+	int opt;
+	struct passwd *pw;
+	int debug_mode = 0, do_setuid = 0;
+	int print_visual = 0, print_bubblebabble = 0, fingerprint_hash = -1;
+	enum sshkey_fp_rep rep = SSH_FP_DEFAULT;
+	LogLevel log_level;
+
+	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
+	sanitise_stdfd();
+
+	__progname = ssh_get_progname(argv[0]);
+
+	log_init(argv[0], SYSLOG_LEVEL_INFO, SYSLOG_FACILITY_USER, 1);
+
+	msetlocale();
+
+	while ((opt = getopt(argc, argv, "BVv" "C:E:" "a:f:u:")) != -1) {
+		switch (opt) {
+		case 'B':
+			print_bubblebabble = 1;
+			break;
+		case 'V':
+			print_visual = 1;
+			break;
+		case 'v':
+			if (debug_mode == 0) {
+				debug_mode = 1;
+				log_level = SYSLOG_LEVEL_DEBUG1;
+			} else if (log_level < SYSLOG_LEVEL_DEBUG3)
+				log_level++;
+			break;
+		case 'C':
+			connection_spec = optarg;
+			break;
+		case 'E':
+			fingerprint_hash = ssh_digest_alg_by_name(optarg);
+			if (fingerprint_hash == -1)
+				fatal("Invalid hash algorithm \"%s\"", optarg);
+			break;
+		case 'a':
+			authorized_keys_path = optarg;
+			break;
+		case 'f':
+			sshd_config_path = optarg;
+			break;
+		case 'u':
+			target_user = optarg;
+			break;
+		default:
+			usage();
+		}
+	}
+
+	if (debug_mode)
+		log_init(argv[0], log_level, SYSLOG_FACILITY_USER, 1);
+
+	if (print_bubblebabble) {
+		if (print_visual || fingerprint_hash != -1)
+			fatal("-B (bubblebabble) can be used with -V or -E");
+		rep = SSH_FP_BUBBLEBABBLE;
+	} else if (print_visual)
+		rep = SSH_FP_RANDOMART;
+
+	if (fingerprint_hash == -1)
+		fingerprint_hash = SSH_FP_HASH_DEFAULT;
+
+	exec_user = getuid();
+	if (target_user) {
+		if (exec_user != 0)
+			fatal("only root is allowed to use -u option");
+		pw = getpwnam(target_user);
+		if (!pw)
+			fatal("user %s does ot exist", target_user);
+	} else {
+		pw = getpwuid(exec_user);
+		if (!pw)
+			fatal("No user exists for uid %lu", (u_long)getuid());
+		if (exec_user == 0)
+			do_setuid = 1;
+		target_user = pw->pw_name;
+	}
+
+	if ((cfg = sshbuf_new()) == NULL)
+		fatal("%s: sshbuf_new failed", __func__);
+	load_server_config(sshd_config_path, cfg);
+	initialize_server_options(&options);
+	parse_server_config(&options, sshd_config_path, cfg, NULL);
+	fill_default_server_options(&options);
+	snprintf(conspec_buf, sizeof(conspec_buf), "user=%s,%s", target_user,
+						connection_spec ? connection_spec : "host=,addr=");
+	connection_info = get_connection_info(NULL, 0, 0);
+	if (parse_server_match_testspec(connection_info, conspec_buf) == -1)
+		exit(1);
+	parse_server_match_config(&options, connection_info);
+
+	if (do_setuid)
+		temporarily_use_uid(pw);
+
+	if (authorized_keys_path) {
+		list_id_from_file(authorized_keys_path, fingerprint_hash, rep, pw);
+	} else {
+		u_int i;
+		for (i = 0; i < options.num_authkeys_files; i++) {
+			char *file;
+			if (strcasecmp(options.authorized_keys_files[i], "none") == 0)
+				continue;
+			file = expand_authorized_keys(options.authorized_keys_files[i],pw);
+			list_id_from_file(file, fingerprint_hash, rep, pw);
+			free(file);
+		}
+	}
+	exit(0);
+}
